// Minimal enrichment runner
// Usage: node enrich-now.js "C:/path/to/target/folder"

import fs from 'fs';
import path from 'path';
import crypto from 'crypto';

const targetDir = process.argv[2] || '.';
const exts = ['.ts', '.js', '.py', '.json', '.yml', '.yaml'];
const enrichedDir = path.join(targetDir, '_enriched');

fs.mkdirSync(enrichedDir, { recursive: true });

function sha256(filePath) {
  const data = fs.readFileSync(filePath);
  return crypto.createHash('sha256').update(data).digest('hex');
}

function cleanContent(content) {
  return content
    // comment spam
    .replace(/^\s*\/\/.*$/gm, '')
    .replace(/\/\*[\s\S]*?\*\//gm, '')
    .replace(/^\s*#.*$/gm, '')
    // placeholders
    .replace(/TODO.*$/gmi, '')
    .replace(/FILL_ME_IN.*$/gmi, '')
    .replace(/^.*Generated by.*$/gmi, '')
    // empty stubs
    .replace(/^\s*if\s*\(.*\)\s*\{\s*\}$/gm, '')
    .replace(/^\s*function\s+\w+\s*\(\)\s*\{\s*\}$/gm, '');
}

function processDir(dir) {
  for (const entry of fs.readdirSync(dir)) {
    const fullPath = path.join(dir, entry);
    const stat = fs.statSync(fullPath);

    if (stat.isDirectory()) {
      processDir(fullPath);
    } else if (exts.includes(path.extname(entry))) {
      const relPath = path.relative(targetDir, fullPath);
      const hash = sha256(fullPath);
      console.log(`[enrich] ${relPath} (${hash.slice(0, 8)})`);

      const original = fs.readFileSync(fullPath, 'utf8');
      const cleaned = cleanContent(original);

      const outPath = path.join(enrichedDir, relPath);
      fs.mkdirSync(path.dirname(outPath), { recursive: true });
      fs.writeFileSync(outPath, cleaned, 'utf8');
    }
  }
}

console.log(`[enrich] Target: ${targetDir}`);
processDir(targetDir);
console.log(`[enrich] Done. Output: ${enrichedDir}`);
